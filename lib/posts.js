import fs from 'fs'import path from 'path'import matter from 'gray-matter'// Define the root directory for all postsconst postsDirectory = path.join(process.cwd(), 'posts')// âœ… Get all story folders inside /postsexport function getAllStories() {  if (!fs.existsSync(postsDirectory)) return []  const storyFolders = fs.readdirSync(postsDirectory)  return storyFolders.map((folderName) => {    const storyPath = path.join(postsDirectory, folderName)    const chapterFiles = fs.readdirSync(storyPath).filter(file => file.endsWith('.md'))    // Sort chapters by filename (or improve later with metadata)    chapterFiles.sort()    // Use the first file to get story title/summary (fallback)    const firstChapterPath = path.join(storyPath, chapterFiles[0])    const firstChapterContent = fs.readFileSync(firstChapterPath, 'utf8')    const { data } = matter(firstChapterContent)    return {      id: folderName,      title: data.storyTitle || folderName,      summary: data.summary || '',      coverImage: data.coverImage || '', // Optional cover image      chapters: chapterFiles.map(filename => ({        id: filename.replace(/\.md$/, ''),      })),    }  })}export function getAllChapters(storyId) {  const storyPath = path.join(postsDirectory, storyId)  if (!fs.existsSync(storyPath)) return []  const chapterFiles = fs.readdirSync(storyPath).filter(file => file.endsWith('.md'))  chapterFiles.sort()  return chapterFiles.map((filename, index) => {    const chapterId = filename.replace(/\.md$/, '')    return {      id: chapterId,      path: `/stories/${storyId}/${chapterId}`,    }  })}export function getChapterContent(storyId, chapterId) {  const filePath = path.join(postsDirectory, storyId, `${chapterId}.md`)  if (!fs.existsSync(filePath)) {    return {      title: 'Chapter Not Found',      date: '',      content: 'This chapter does not exist.',    }  }  const fileContent = fs.readFileSync(filePath, 'utf8')  const { data, content } = matter(fileContent)  const allChapters = getAllChapters(storyId)  const currentIndex = allChapters.findIndex(ch => ch.id === chapterId)  return {    title: data.title || chapterId,    date: data.date || '',    content,    nextChapter: allChapters[currentIndex + 1]?.id || null,    prevChapter: allChapters[currentIndex - 1]?.id || null,  }}