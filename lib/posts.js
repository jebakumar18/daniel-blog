import fs from 'fs'import path from 'path'import matter from 'gray-matter'const postsDirectory = path.join(process.cwd(), 'posts')export function getChapterContent(storyId, chapterId) {  const storyPath = path.join(postsDirectory, storyId)  const fullPath = path.join(storyPath, `${chapterId}.md`)  const fileContents = fs.readFileSync(fullPath, 'utf8')  const matterResult = matter(fileContents)  // Get all chapter filenames to calculate next/prev  const files = fs.readdirSync(storyPath).filter(file => file.endsWith('.md')).sort()  const currentIndex = files.indexOf(`${chapterId}.md`)  const prevChapter = currentIndex > 0 ? files[currentIndex - 1].replace('.md', '') : null  const nextChapter = currentIndex < files.length - 1 ? files[currentIndex + 1].replace('.md', '') : null  return {    storyId,    chapterId,    ...matterResult.data,    content: matterResult.content,    prevChapter,    nextChapter  }}export function getAllStories() {  const storyFolders = fs.readdirSync(postsDirectory, { withFileTypes: true })    .filter(dirent => dirent.isDirectory())    .map(dirent => dirent.name)  return storyFolders}export function getChapters(storyId) {  const storyPath = path.join(postsDirectory, storyId)  const files = fs.readdirSync(storyPath)  const chapters = files    .filter((file) => file.endsWith('.md'))    .sort()    .map((filename) => {      const fullPath = path.join(storyPath, filename)      const fileContents = fs.readFileSync(fullPath, 'utf8')      const matterResult = matter(fileContents)      return {        storyId,        chapterId: filename.replace(/\.md$/, ''),        title: matterResult.data.title || filename,        date: matterResult.data.date || '',      }    })  return chapters}